
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089e  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000636  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049d  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015a  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPort>:
/***********************************************************************
	Инициализация портов В/B
************************************************************************/
void InitPort(void)
{	
	DDRA = 0b11111111;	//PA0...PA7 - выходы (подключены к светодиодам)
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b10000000;	//один светодиод включен	
  96:	90 e8       	ldi	r25, 0x80	; 128
  98:	9b bb       	out	0x1b, r25	; 27
	
	DDRB = 0b11001111;	//PB4,PB5 - входы, остальные - выходы
  9a:	9f ec       	ldi	r25, 0xCF	; 207
  9c:	97 bb       	out	0x17, r25	; 23
	PORTB = 0b00110010;	//выбраны десятки (2-й индикатор)
  9e:	92 e3       	ldi	r25, 0x32	; 50
  a0:	98 bb       	out	0x18, r25	; 24
						//на входах PB4 и PB5 - подтягивающие резисторы
		
	DDRC = 0b11111111;	//PС0...PС7 - выходы
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11111100;	//код "0" при включении
  a4:	8c ef       	ldi	r24, 0xFC	; 252
  a6:	85 bb       	out	0x15, r24	; 21
    
	DDRD = 0b11110011;	//PD2(INT0),PD3(INT1)-входы
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;	//Подтягивающие резисторы на входах
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <InitTimerT0>:
	Инициализация таймера T0 
	Период таймера: t = (77+1)*2*1024/8000000 = 10 мс
************************************************************************/
void InitTimerT0(void)
{
	TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS00);
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1<<OCIE0;
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	89 bf       	out	0x39, r24	; 57
	OCR0 = 77;
  bc:	8d e4       	ldi	r24, 0x4D	; 77
  be:	8c bf       	out	0x3c, r24	; 60
  c0:	08 95       	ret

000000c2 <InitTimerT1>:
	Режим работы: Fast PWM с TOP = 0x00FF, выходная частота:
	8000000 Гц / (8*256) = 3906,25 Гц
************************************************************************/
void InitTimerT1(void)
{
	TCCR1A = (1<<COM1B1)|(1<<WGM10);	//Разрешение выхода канала В
  c2:	81 e2       	ldi	r24, 0x21	; 33
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<CS11);		//Режим Fast PWM с TOP = 0x00FF
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	8e bd       	out	0x2e, r24	; 46
										//Разрешение работы с предделителем 8
	OCR1B = INIT_DUTY;					//Задание начальной скважности
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	99 bd       	out	0x29, r25	; 41
  d0:	88 bd       	out	0x28, r24	; 40
  d2:	08 95       	ret

000000d4 <InitExtInt>:
	Инициализация внешних прерываний INT1
	Условние прерывания - любое изменение уровня
************************************************************************/
void InitExtInt(void)
{
	MCUCR |= (1<<ISC10)|(1<<ISC00);	//Задание условия прерывания: любое изменение уровня
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	85 60       	ori	r24, 0x05	; 5
  d8:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);	//Разрешение INT1	
  da:	8b b7       	in	r24, 0x3b	; 59
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	8b bf       	out	0x3b, r24	; 59
  e0:	08 95       	ret

000000e2 <DigitConvert>:
/***********************************************************************
Подпрограмма преобразования значения duty
в двоично-десятичный код tens, ones
************************************************************************/
void DigitConvert (unsigned char dataIn, unsigned char *tensOut, unsigned char *onesOut)
{
  e2:	fb 01       	movw	r30, r22
	unsigned char percent; //Промежуточная переменная для преобразования в проценты

	percent = ((unsigned short)dataIn)*100/255; //Преобразование из диапазона 0..255 в диапазон 0..100
  e4:	94 e6       	ldi	r25, 0x64	; 100
  e6:	89 9f       	mul	r24, r25
  e8:	90 01       	movw	r18, r0
  ea:	11 24       	eor	r1, r1
  ec:	a1 e8       	ldi	r26, 0x81	; 129
  ee:	b0 e8       	ldi	r27, 0x80	; 128
  f0:	0e 94 8a 01 	call	0x314	; 0x314 <__umulhisi3>
  f4:	88 0f       	add	r24, r24
  f6:	89 2f       	mov	r24, r25
  f8:	88 1f       	adc	r24, r24
  fa:	99 0b       	sbc	r25, r25
  fc:	91 95       	neg	r25
												//В процессе преобразование происходит выход за границу типа,
												//поэтому сначала делается явное преобразование типа

	*onesOut = percent%10;	//Определение количества единиц (остаток от деления на 10)
  fe:	9d ec       	ldi	r25, 0xCD	; 205
 100:	89 9f       	mul	r24, r25
 102:	91 2d       	mov	r25, r1
 104:	11 24       	eor	r1, r1
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	96 95       	lsr	r25
 10c:	39 2f       	mov	r19, r25
 10e:	33 0f       	add	r19, r19
 110:	23 2f       	mov	r18, r19
 112:	22 0f       	add	r18, r18
 114:	22 0f       	add	r18, r18
 116:	23 0f       	add	r18, r19
 118:	82 1b       	sub	r24, r18
 11a:	da 01       	movw	r26, r20
 11c:	8c 93       	st	X, r24
	*tensOut = percent/10;	//Определение количества десятков (целочисленное деление на 10)	
 11e:	90 83       	st	Z, r25
 120:	08 95       	ret

00000122 <Display>:
/***********************************************************************
	Подпрограмма динамической индикации
************************************************************************/
void Display(void)
{
	counterDisplay--;	//Уменьшение счетчика времени активности индикатора
 122:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterDisplay>
 126:	81 50       	subi	r24, 0x01	; 1
	if (counterDisplay == 0)
 128:	19 f0       	breq	.+6      	; 0x130 <Display+0xe>
/***********************************************************************
	Подпрограмма динамической индикации
************************************************************************/
void Display(void)
{
	counterDisplay--;	//Уменьшение счетчика времени активности индикатора
 12a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counterDisplay>
 12e:	08 95       	ret
	if (counterDisplay == 0)
	{
		counterDisplay = VAL_DISP;	//Загрузка счетчика для реализации
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counterDisplay>
									//динамической индикации
		
		//Переключение индикаторов
		if (dispNum != 0)	//Переключение на tens
 136:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <dispNum>
 13a:	88 23       	and	r24, r24
 13c:	61 f0       	breq	.+24     	; 0x156 <Display+0x34>
		{
			PORTC = table[tens];	//Загрузка нового значения в регистр PORTC
 13e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <tens>
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	eb 59       	subi	r30, 0x9B	; 155
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	80 81       	ld	r24, Z
 14a:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~(1<<0);		//Выключение индикатора ones
 14c:	c0 98       	cbi	0x18, 0	; 24
			PORTB |= (1<<1);		//Включение индикатора tens
 14e:	c1 9a       	sbi	0x18, 1	; 24
			dispNum = 0;
 150:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <dispNum>
 154:	08 95       	ret
		}
		else //Переключение на ones
		{
			PORTC = table[ones];	//Загрузка нового значения в регистр PORTC
 156:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <ones>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	eb 59       	subi	r30, 0x9B	; 155
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~(1<<1);		//Выключение индикатора tens
 164:	c1 98       	cbi	0x18, 1	; 24
			PORTB |= (1<<0);		//Включение индикатора ones
 166:	c0 9a       	sbi	0x18, 0	; 24
			dispNum = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <dispNum>
 16e:	08 95       	ret

00000170 <main>:
Главная программа
************************************************************************/
int main(void)
{	
	//Инициализация необходимых периферийных модулей
	InitPort();		//Инициализация портов В/B
 170:	0e 94 49 00 	call	0x92	; 0x92 <InitPort>
	InitTimerT0();	//Инициализация таймера T0
 174:	0e 94 59 00 	call	0xb2	; 0xb2 <InitTimerT0>
	InitTimerT1();	//Инициализация таймера T1
 178:	0e 94 61 00 	call	0xc2	; 0xc2 <InitTimerT1>
	InitExtInt();	//Инициализация внешних прерываний INT0, INT1
 17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <InitExtInt>

	//Формирование значения tens и ones при включении питания
	//tens и ones передаются в функцию по адресу
	DigitConvert(duty, &tens, &ones);	
 180:	43 e7       	ldi	r20, 0x73	; 115
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	64 e7       	ldi	r22, 0x74	; 116
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 18c:	0e 94 71 00 	call	0xe2	; 0xe2 <DigitConvert>
	
	sei();	//Глобальное разрешение прерываний (определена в interrupt.h)
 190:	78 94       	sei
					OCR1B = duty;		//Загрузка duty в OCR1B
					DigitConvert(duty, &tens, &ones); //Преобразование duty в tens и ones	
				}
				//для защиты от дребезга формируется пауза в DEB_NUM
				//переполнений Т0
				debouncePB = DEB_NUM;  //Инициализация debouncePB
 192:	de e1       	ldi	r29, 0x1E	; 30
				flagPB = 1; //Установка флага о необходимости подавления дребезга
 194:	c1 e0       	ldi	r28, 0x01	; 1
	sei();	//Глобальное разрешение прерываний (определена в interrupt.h)
						
	//Основной цикл					
	while(1)
    {
		Display(); //Периодический вызов подпрограммы динамической индикации
 196:	0e 94 91 00 	call	0x122	; 0x122 <Display>
		//Проверка флага об активном состоянии подавления дребезга
		if (flagPB == 0) //Дребезг от прошлого нажатия уже подавлен
 19a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 19e:	81 11       	cpse	r24, r1
 1a0:	fa cf       	rjmp	.-12     	; 0x196 <main+0x26>
		{
			if ((PINB & (1 << PINB4)) == 0) //Кнопка PB4 нажата?
 1a2:	b4 99       	sbic	0x16, 4	; 22
 1a4:	23 c0       	rjmp	.+70     	; 0x1ec <main+0x7c>
			{
				if(duty != INIT_DUTY)
 1a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 1aa:	8a 30       	cpi	r24, 0x0A	; 10
 1ac:	71 f0       	breq	.+28     	; 0x1ca <main+0x5a>
				{
					duty -= INIT_DUTY;	//Уменьшение значения duty на INIT_DUTY
 1ae:	8a 50       	subi	r24, 0x0A	; 10
 1b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <duty>
					OCR1B = duty;		//Загрузка duty в OCR1B
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	99 bd       	out	0x29, r25	; 41
 1b8:	88 bd       	out	0x28, r24	; 40
					DigitConvert(duty, &tens, &ones); //Преобразование duty в tens и ones	
 1ba:	43 e7       	ldi	r20, 0x73	; 115
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	64 e7       	ldi	r22, 0x74	; 116
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 1c6:	0e 94 71 00 	call	0xe2	; 0xe2 <DigitConvert>
				}
				//для защиты от дребезга формируется пауза в DEB_NUM
				//переполнений Т0
				debouncePB = DEB_NUM;  //Инициализация debouncePB
 1ca:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; //Установка флага о необходимости подавления дребезга
 1ce:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
				while (flagPB != 0 || (PINB & (1 << PINB4)) == 0) //Ожидание подавления дребезга и отпускания кнопки
				{
					Display(); //Периодический вызов подпрограммы динамической индикации
 1d2:	0e 94 91 00 	call	0x122	; 0x122 <Display>
				}
				//для защиты от дребезга формируется пауза в DEB_NUM
				//переполнений Т0
				debouncePB = DEB_NUM;  //Инициализация debouncePB
				flagPB = 1; //Установка флага о необходимости подавления дребезга
				while (flagPB != 0 || (PINB & (1 << PINB4)) == 0) //Ожидание подавления дребезга и отпускания кнопки
 1d6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 1da:	81 11       	cpse	r24, r1
 1dc:	fa cf       	rjmp	.-12     	; 0x1d2 <main+0x62>
 1de:	b4 9b       	sbis	0x16, 4	; 22
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <main+0x62>
				{
					Display(); //Периодический вызов подпрограммы динамической индикации
				}
				debouncePB = DEB_NUM;  //Инициализация debouncePB
 1e2:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; //Установка флага о необходимости подавления дребезга
 1e6:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
 1ea:	d5 cf       	rjmp	.-86     	; 0x196 <main+0x26>
			}
			else if ((PINB & (1 << PINB5)) == 0) //кнопка PB5 нажата?
 1ec:	b5 99       	sbic	0x16, 5	; 22
 1ee:	d3 cf       	rjmp	.-90     	; 0x196 <main+0x26>
			{
				if(duty != 250) //Маскимальное значение
 1f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 1f4:	8a 3f       	cpi	r24, 0xFA	; 250
 1f6:	71 f0       	breq	.+28     	; 0x214 <main+0xa4>
				{
					duty += INIT_DUTY;	//УВеличение значения duty на INIT_DUTY
 1f8:	86 5f       	subi	r24, 0xF6	; 246
 1fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <duty>
					OCR1B = duty;		//Загрузка duty в OCR1B
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	99 bd       	out	0x29, r25	; 41
 202:	88 bd       	out	0x28, r24	; 40
					DigitConvert(duty, &tens, &ones); //Преобразование duty в tens и ones	
 204:	43 e7       	ldi	r20, 0x73	; 115
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	64 e7       	ldi	r22, 0x74	; 116
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 210:	0e 94 71 00 	call	0xe2	; 0xe2 <DigitConvert>
				}
				//для защиты от дребезга формируется пауза в DEB_NUM
				//переполнений Т0
				debouncePB = DEB_NUM;  //Инициализация debouncePB
 214:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; //Установка флага о необходимости подавления дребезга
 218:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
				while (flagPB != 0 || (PINB & (1 << PINB5)) == 0) //Ожидание подавления дребезга и отпускания кнопки
				{
					Display(); //Периодический вызов подпрограммы динамической индикации
 21c:	0e 94 91 00 	call	0x122	; 0x122 <Display>
				}
				//для защиты от дребезга формируется пауза в DEB_NUM
				//переполнений Т0
				debouncePB = DEB_NUM;  //Инициализация debouncePB
				flagPB = 1; //Установка флага о необходимости подавления дребезга
				while (flagPB != 0 || (PINB & (1 << PINB5)) == 0) //Ожидание подавления дребезга и отпускания кнопки
 220:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 224:	81 11       	cpse	r24, r1
 226:	fa cf       	rjmp	.-12     	; 0x21c <main+0xac>
 228:	b5 9b       	sbis	0x16, 5	; 22
 22a:	f8 cf       	rjmp	.-16     	; 0x21c <main+0xac>
				{
					Display(); //Периодический вызов подпрограммы динамической индикации
				}
				debouncePB = DEB_NUM;  //Инициализация debouncePB
 22c:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; //Установка флага о необходимости подавления дребезга
 230:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
 234:	b0 cf       	rjmp	.-160    	; 0x196 <main+0x26>

00000236 <__vector_2>:

/***********************************************************************
	Подпрограмма обработки внешнего прерывания INT1 (кнопка PD3)
************************************************************************/
ISR(INT1_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
	if ((PIND & (1 << PIND3)) == 0) //PD3 = 0? 
 242:	83 99       	sbic	0x10, 3	; 16
 244:	0d c0       	rjmp	.+26     	; 0x260 <__vector_2+0x2a>
	{
		if( maxCounter == MIN_VEL)
 246:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxCounter>
 24a:	80 32       	cpi	r24, 0x20	; 32
 24c:	31 f4       	brne	.+12     	; 0x25a <__vector_2+0x24>
		{
			counter = 0;
 24e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
			maxCounter = MAX_VEL;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <maxCounter>
 258:	03 c0       	rjmp	.+6      	; 0x260 <__vector_2+0x2a>
		}
		else maxCounter*=2;
 25a:	88 0f       	add	r24, r24
 25c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <maxCounter>
	}
	GICR &= ~(1<<INT1); //Запрет прерывания INT1
 260:	8b b7       	in	r24, 0x3b	; 59
 262:	8f 77       	andi	r24, 0x7F	; 127
 264:	8b bf       	out	0x3b, r24	; 59
	//для защиты от дребезга формируется пауза в DEB_NUM
	//переполнений Т0
	flagInt1 = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	debounceInt1 = DEB_NUM;
 26c:	8e e1       	ldi	r24, 0x1E	; 30
 26e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <debounceInt1>
}
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_19>:

/***********************************************************************
	Подпрограмма обработки прерывания по совпадению таймера Т0
************************************************************************/
ISR(TIMER0_COMP_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
	unsigned char temp; //Для временного хранения
	
	//Управление "бегущим огоньком"
	counter++;
 28c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if (counter == maxCounter) //Переключение активного светодиода
 296:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <maxCounter>
 29a:	89 13       	cpse	r24, r25
 29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_19+0x4a>
	{  
		counter = 0;
 29e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		temp = PORTA;
 2a2:	8b b3       	in	r24, 0x1b	; 27
		if(direction == 0)
 2a4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2a8:	91 11       	cpse	r25, r1
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <__vector_19+0x3c>
		{
			temp = temp << 1; //Логический сдвиг влево
 2ac:	88 0f       	add	r24, r24
			if (temp == 0) //Было переполнение?
 2ae:	59 f4       	brne	.+22     	; 0x2c6 <__vector_19+0x48>
			{
				direction = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				temp = 0b10000000; //Начальная инициализация
 2b6:	80 e8       	ldi	r24, 0x80	; 128
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <__vector_19+0x48>
			}
		}
		else // direction == 1
		{
			temp = 0b10000000 + (temp >> 1); //Логический сдвиг вправо
 2ba:	86 95       	lsr	r24
 2bc:	80 58       	subi	r24, 0x80	; 128
			if (temp==0b11111111) //Было переполнение?
 2be:	8f 3f       	cpi	r24, 0xFF	; 255
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <__vector_19+0x48>
			{
				direction = 0;
 2c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			}
		}
		PORTA = temp;	
 2c6:	8b bb       	out	0x1b, r24	; 27
	}

	//Подавление дребезга контактов INT1
	if (flagInt1 == 1)
 2c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	71 f4       	brne	.+28     	; 0x2ec <__vector_19+0x6e>
	{
		debounceInt1--;
 2d0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <debounceInt1>
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <debounceInt1>
		if (debounceInt1 == 0)
 2da:	81 11       	cpse	r24, r1
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <__vector_19+0x6e>
		{
			flagInt1 = 0;		//Сброс программного флага	
 2de:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
			GIFR = (1<<INTF1);	//Сброс флага прерывания
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	8a bf       	out	0x3a, r24	; 58
			GICR |=(1<<INT1);	//Разрешение прерывания					
 2e6:	8b b7       	in	r24, 0x3b	; 59
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	8b bf       	out	0x3b, r24	; 59
		}
	}

	//Подавление дребезга контактов PB4 и PB5
	if (flagPB == 1)
 2ec:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	49 f4       	brne	.+18     	; 0x306 <__vector_19+0x88>
	{
		debouncePB--;
 2f4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <debouncePB>
 2f8:	81 50       	subi	r24, 0x01	; 1
 2fa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <debouncePB>
		if (debouncePB == 0) flagPB = 0; //Сброс программного флага	
 2fe:	81 11       	cpse	r24, r1
 300:	02 c0       	rjmp	.+4      	; 0x306 <__vector_19+0x88>
 302:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flagPB>
	}
}
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__umulhisi3>:
 314:	a2 9f       	mul	r26, r18
 316:	b0 01       	movw	r22, r0
 318:	b3 9f       	mul	r27, r19
 31a:	c0 01       	movw	r24, r0
 31c:	a3 9f       	mul	r26, r19
 31e:	70 0d       	add	r23, r0
 320:	81 1d       	adc	r24, r1
 322:	11 24       	eor	r1, r1
 324:	91 1d       	adc	r25, r1
 326:	b2 9f       	mul	r27, r18
 328:	70 0d       	add	r23, r0
 32a:	81 1d       	adc	r24, r1
 32c:	11 24       	eor	r1, r1
 32e:	91 1d       	adc	r25, r1
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
