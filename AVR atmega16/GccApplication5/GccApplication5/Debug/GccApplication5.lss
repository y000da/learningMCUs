
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006e  0080006e  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008da  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000636  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000502  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017e  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_1>
   8:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPort>:
/***********************************************************************
	Инициализация портов В/B
************************************************************************/
void InitPort(void)
{	
	DDRA = 0b11111111;	// PA0...PA7 - выходы (подключены к светодиодам)
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000001;	// один светодиод включен	
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	9b bb       	out	0x1b, r25	; 27
	
	DDRB = 0b11001111;	// PB4,PB5 - входы, остальные - выходы
  9a:	9f ec       	ldi	r25, 0xCF	; 207
  9c:	97 bb       	out	0x17, r25	; 23
	PORTB = 0b00110010;	// выбраны десятки (2-й индикатор)
  9e:	92 e3       	ldi	r25, 0x32	; 50
  a0:	98 bb       	out	0x18, r25	; 24
						// на входах PB4 и PB5 - подтягивающие резисторы
		
	DDRC = 0b11111111;	// PС0...PС7 - выходы
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11111100;	// код "0" при включении
  a4:	8c ef       	ldi	r24, 0xFC	; 252
  a6:	85 bb       	out	0x15, r24	; 21
    
	DDRD = 0b11110011;	// PD2(INT0),PD3(INT1)-входы
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;	// Подтягивающие резисторы на входах
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <InitTimerT0>:
	Инициализация таймера T0 
	Время переполнения таймера: t = 256*1024/8000000 = 33 мс
************************************************************************/
void InitTimerT0(void)
{
	TCCR0 = (1<<CS02)|(1<<CS00);	//Разрешение работы таймера с предделителем 1024
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1<<TOIE0;				//Разрешение прерывания по переполнению Т0
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	89 bf       	out	0x39, r24	; 57
  bc:	08 95       	ret

000000be <InitTimerT1>:
	Режим работы: Fast PWM с TOP = 0x00FF, выходная частота:
	8000000 Гц / (8*256) = 3906,25 Гц
************************************************************************/
void InitTimerT1(void)
{
	TCCR1A = (1<<COM1B1)|(1<<WGM11);	// Разрешение выхода канала В
  be:	82 e2       	ldi	r24, 0x22	; 34
  c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<CS11);
  c2:	82 e1       	ldi	r24, 0x12	; 18
  c4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 199;                         // Режим Fast PWM с ICR = 199
  c6:	87 ec       	ldi	r24, 0xC7	; 199
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	97 bd       	out	0x27, r25	; 39
  cc:	86 bd       	out	0x26, r24	; 38
	// Разрешение работы с предделителем 8
	OCR1B = INIT_DUTY;					// Задание начальной скважности
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	99 bd       	out	0x29, r25	; 41
  d4:	88 bd       	out	0x28, r24	; 40
  d6:	08 95       	ret

000000d8 <InitExtInt>:
	Инициализация внешних прерываний INT0, INT1
	Условние прерывания - любое изменение уровня
************************************************************************/
void InitExtInt(void)
{
	MCUCR |= (1<<ISC10)|(1<<ISC00);	// Задание условия прерывания: любое изменение уровня
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1)|(1<<INT0);	// Разрешение INT0 и INT1	
  de:	8b b7       	in	r24, 0x3b	; 59
  e0:	80 6c       	ori	r24, 0xC0	; 192
  e2:	8b bf       	out	0x3b, r24	; 59
  e4:	08 95       	ret

000000e6 <DigitConvert>:
/***********************************************************************
Подпрограмма преобразования значения duty
в двоично-десятичный код tens, ones
************************************************************************/
void DigitConvert (unsigned char dataIn, unsigned char *tensOut, unsigned char *onesOut)
{
  e6:	fb 01       	movw	r30, r22
	unsigned char percent; // Промежуточная переменная для преобразования в проценты

	percent = ((unsigned short)dataIn)*100/199; // Преобразование из диапазона 0..255 в диапазон 0..100
  e8:	94 e6       	ldi	r25, 0x64	; 100
  ea:	89 9f       	mul	r24, r25
  ec:	90 01       	movw	r18, r0
  ee:	11 24       	eor	r1, r1
  f0:	a5 e5       	ldi	r26, 0x55	; 85
  f2:	b2 e5       	ldi	r27, 0x52	; 82
  f4:	0e 94 bd 01 	call	0x37a	; 0x37a <__umulhisi3>
  f8:	00 24       	eor	r0, r0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	00 1c       	adc	r0, r0
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	00 1c       	adc	r0, r0
 106:	89 2f       	mov	r24, r25
 108:	90 2d       	mov	r25, r0
												// В процессе преобразование происходит выход за границу типа,
												// поэтому сначала делается явное преобразование типа

	*onesOut = percent%10;	// Определение количества единиц (остаток от деления на 10)
 10a:	9d ec       	ldi	r25, 0xCD	; 205
 10c:	89 9f       	mul	r24, r25
 10e:	91 2d       	mov	r25, r1
 110:	11 24       	eor	r1, r1
 112:	96 95       	lsr	r25
 114:	96 95       	lsr	r25
 116:	96 95       	lsr	r25
 118:	39 2f       	mov	r19, r25
 11a:	33 0f       	add	r19, r19
 11c:	23 2f       	mov	r18, r19
 11e:	22 0f       	add	r18, r18
 120:	22 0f       	add	r18, r18
 122:	23 0f       	add	r18, r19
 124:	82 1b       	sub	r24, r18
 126:	da 01       	movw	r26, r20
 128:	8c 93       	st	X, r24
	*tensOut = percent/10;	// Определение количества десятков (целочисленное деление на 10)	
 12a:	90 83       	st	Z, r25
 12c:	08 95       	ret

0000012e <Display>:
/***********************************************************************
	Подпрограмма динамической индикации
************************************************************************/
void Display(void)
{
	counterDisplay--;	// Уменьшение счетчика времени активности индикатора
 12e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counterDisplay>
 132:	81 50       	subi	r24, 0x01	; 1
	if (counterDisplay == 0)
 134:	19 f0       	breq	.+6      	; 0x13c <Display+0xe>
/***********************************************************************
	Подпрограмма динамической индикации
************************************************************************/
void Display(void)
{
	counterDisplay--;	// Уменьшение счетчика времени активности индикатора
 136:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counterDisplay>
 13a:	08 95       	ret
	if (counterDisplay == 0)
	{
		counterDisplay = VAL_DISP;	// Загрузка счетчика для реализации
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counterDisplay>
									// динамической индикации
		
		// Переключение индикаторов
		if (dispNum != 0)	// Переключение на tens
 142:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <dispNum>
 146:	88 23       	and	r24, r24
 148:	61 f0       	breq	.+24     	; 0x162 <Display+0x34>
		{
			PORTC = table[tens];	// Загрузка нового значения в регистр PORTC
 14a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <tens>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ed 59       	subi	r30, 0x9D	; 157
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 81       	ld	r24, Z
 156:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~(1<<0);		// Выключение индикатора ones
 158:	c0 98       	cbi	0x18, 0	; 24
			PORTB |= (1<<1);		// Включение индикатора tens
 15a:	c1 9a       	sbi	0x18, 1	; 24
			dispNum = 0;
 15c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <dispNum>
 160:	08 95       	ret
		}
		else // Переключение на ones
		{
			PORTC = table[ones];	// Загрузка нового значения в регистр PORTC
 162:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <ones>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ed 59       	subi	r30, 0x9D	; 157
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~(1<<1);		// Выключение индикатора tens
 170:	c1 98       	cbi	0x18, 1	; 24
			PORTB |= (1<<0);		// Включение индикатора ones
 172:	c0 9a       	sbi	0x18, 0	; 24
			dispNum = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <dispNum>
 17a:	08 95       	ret

0000017c <main>:
Главная программа
************************************************************************/
int main(void)
{	
	//Инициализация необходимых периферийных модулей
	InitPort();		//Инициализация портов В/B
 17c:	0e 94 49 00 	call	0x92	; 0x92 <InitPort>
	InitTimerT0();	//Инициализация таймера T0
 180:	0e 94 59 00 	call	0xb2	; 0xb2 <InitTimerT0>
	InitTimerT1();	//Инициализация таймера T1
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <InitTimerT1>
	InitExtInt();	//Инициализация внешних прерываний INT0, INT1
 188:	0e 94 6c 00 	call	0xd8	; 0xd8 <InitExtInt>

	//Формирование значения tens и ones при включении питания
	//tens и ones передаются в функцию по адресу
	DigitConvert(duty, &tens, &ones);	
 18c:	43 e7       	ldi	r20, 0x73	; 115
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	64 e7       	ldi	r22, 0x74	; 116
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 198:	0e 94 73 00 	call	0xe6	; 0xe6 <DigitConvert>
	
	sei();	//Глобальное разрешение прерываний (определена в interrupt.h)
 19c:	78 94       	sei
					OCR1B = duty;		// Загрузка duty в OCR1B
					DigitConvert(duty, &tens, &ones); // Преобразование duty в tens и ones	
				}
				// для защиты от дребезга формируется пауза в DEB_NUM
				// переполнений Т0
				debouncePB = DEB_NUM;  // Инициализация debouncePB
 19e:	da e0       	ldi	r29, 0x0A	; 10
				flagPB = 1; // Установка флага о необходимости подавления дребезга
 1a0:	c1 e0       	ldi	r28, 0x01	; 1
	sei();	//Глобальное разрешение прерываний (определена в interrupt.h)
						
	//Основной цикл					
	while(1)
    {
		Display(); // Периодический вызов подпрограммы динамической индикации
 1a2:	0e 94 97 00 	call	0x12e	; 0x12e <Display>
		// Проверка флага об активном состоянии подавления дребезга
		if (flagPB == 0) // Дребезг от прошлого нажатия уже подавлен
 1a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 1aa:	81 11       	cpse	r24, r1
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <main+0x26>
		{
			if ((PINB & (1 << PINB4)) == 0) // Кнопка PB4 нажата?
 1ae:	b4 99       	sbic	0x16, 4	; 22
 1b0:	23 c0       	rjmp	.+70     	; 0x1f8 <main+0x7c>
			{
				if(duty != INIT_DUTY)
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <main+0x5a>
				{
					duty -= INIT_DUTY;	// Уменьшение значения duty на INIT_DUTY
 1ba:	8a 50       	subi	r24, 0x0A	; 10
 1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
					OCR1B = duty;		// Загрузка duty в OCR1B
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	99 bd       	out	0x29, r25	; 41
 1c4:	88 bd       	out	0x28, r24	; 40
					DigitConvert(duty, &tens, &ones); // Преобразование duty в tens и ones	
 1c6:	43 e7       	ldi	r20, 0x73	; 115
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	64 e7       	ldi	r22, 0x74	; 116
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1d2:	0e 94 73 00 	call	0xe6	; 0xe6 <DigitConvert>
				}
				// для защиты от дребезга формируется пауза в DEB_NUM
				// переполнений Т0
				debouncePB = DEB_NUM;  // Инициализация debouncePB
 1d6:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; // Установка флага о необходимости подавления дребезга
 1da:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
				while (flagPB != 0 || (PINB & (1 << PINB4)) == 0) // Ожидание подавления дребезга и отпускания кнопки
				{
					Display(); // Периодический вызов подпрограммы динамической индикации
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <Display>
				}
				// для защиты от дребезга формируется пауза в DEB_NUM
				// переполнений Т0
				debouncePB = DEB_NUM;  // Инициализация debouncePB
				flagPB = 1; // Установка флага о необходимости подавления дребезга
				while (flagPB != 0 || (PINB & (1 << PINB4)) == 0) // Ожидание подавления дребезга и отпускания кнопки
 1e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 1e6:	81 11       	cpse	r24, r1
 1e8:	fa cf       	rjmp	.-12     	; 0x1de <main+0x62>
 1ea:	b4 9b       	sbis	0x16, 4	; 22
 1ec:	f8 cf       	rjmp	.-16     	; 0x1de <main+0x62>
				{
					Display(); // Периодический вызов подпрограммы динамической индикации
				}
				debouncePB = DEB_NUM;  // Инициализация debouncePB
 1ee:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; // Установка флага о необходимости подавления дребезга
 1f2:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
 1f6:	d5 cf       	rjmp	.-86     	; 0x1a2 <main+0x26>
			}
			else if ((PINB & (1 << PINB5)) == 0) // кнопка PB5 нажата?
 1f8:	b5 99       	sbic	0x16, 5	; 22
 1fa:	d3 cf       	rjmp	.-90     	; 0x1a2 <main+0x26>
			{
				if(duty != 190) //Маскимальное значение
 1fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 200:	8e 3b       	cpi	r24, 0xBE	; 190
 202:	71 f0       	breq	.+28     	; 0x220 <main+0xa4>
				{
					duty += INIT_DUTY;	// УВеличение значения duty на INIT_DUTY
 204:	86 5f       	subi	r24, 0xF6	; 246
 206:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
					OCR1B = duty;		// Загрузка duty в OCR1B
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	99 bd       	out	0x29, r25	; 41
 20e:	88 bd       	out	0x28, r24	; 40
					DigitConvert(duty, &tens, &ones); // Преобразование duty в tens и ones	
 210:	43 e7       	ldi	r20, 0x73	; 115
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	64 e7       	ldi	r22, 0x74	; 116
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 21c:	0e 94 73 00 	call	0xe6	; 0xe6 <DigitConvert>
				}
				// для защиты от дребезга формируется пауза в DEB_NUM
				// переполнений Т0
				debouncePB = DEB_NUM;  // Инициализация debouncePB
 220:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; // Установка флага о необходимости подавления дребезга
 224:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
				while (flagPB != 0 || (PINB & (1 << PINB5)) == 0) // Ожидание подавления дребезга и отпускания кнопки
				{
					Display(); // Периодический вызов подпрограммы динамической индикации
 228:	0e 94 97 00 	call	0x12e	; 0x12e <Display>
				}
				// для защиты от дребезга формируется пауза в DEB_NUM
				// переполнений Т0
				debouncePB = DEB_NUM;  // Инициализация debouncePB
				flagPB = 1; // Установка флага о необходимости подавления дребезга
				while (flagPB != 0 || (PINB & (1 << PINB5)) == 0) // Ожидание подавления дребезга и отпускания кнопки
 22c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 230:	81 11       	cpse	r24, r1
 232:	fa cf       	rjmp	.-12     	; 0x228 <main+0xac>
 234:	b5 9b       	sbis	0x16, 5	; 22
 236:	f8 cf       	rjmp	.-16     	; 0x228 <main+0xac>
				{
					Display(); // Периодический вызов подпрограммы динамической индикации
				}
				debouncePB = DEB_NUM;  // Инициализация debouncePB
 238:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <debouncePB>
				flagPB = 1; // Установка флага о необходимости подавления дребезга
 23c:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <flagPB>
 240:	b0 cf       	rjmp	.-160    	; 0x1a2 <main+0x26>

00000242 <__vector_1>:

/***********************************************************************
	Подпрограмма обработки внешнего прерывания INT0 (кнопка PD2)
************************************************************************/
ISR(INT0_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
	if ((PIND & (1 << PIND2)) == 0) // PD2 = 0? 
 24e:	82 99       	sbic	0x10, 2	; 16
 250:	0a c0       	rjmp	.+20     	; 0x266 <__vector_1+0x24>
	{   
		//Изменение direction
		if(direction == 0) direction = 1;
 252:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 256:	81 11       	cpse	r24, r1
 258:	04 c0       	rjmp	.+8      	; 0x262 <__vector_1+0x20>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 260:	02 c0       	rjmp	.+4      	; 0x266 <__vector_1+0x24>
		else direction = 0;
 262:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	}
	GICR &= ~(1<<INT0); // Запрет прерывания INT0
 266:	8b b7       	in	r24, 0x3b	; 59
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	8b bf       	out	0x3b, r24	; 59
	// для защиты от дребезга формируется пауза в DEB_NUM
	// переполнений Т0
	flagInt0 = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flagInt0>
	debounceInt0 = DEB_NUM;
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <debounceInt0>
}
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_2>:

/***********************************************************************
	Подпрограмма обработки внешнего прерывания INT1 (кнопка PD3)
************************************************************************/
ISR(INT1_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
	if ((PIND & (1 << PIND3)) == 0) // PD3 = 0? 
 290:	83 99       	sbic	0x10, 3	; 16
 292:	0d c0       	rjmp	.+26     	; 0x2ae <__vector_2+0x2a>
	{
		if( maxCounter == MIN_VEL)
 294:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <maxCounter>
 298:	80 32       	cpi	r24, 0x20	; 32
 29a:	31 f4       	brne	.+12     	; 0x2a8 <__vector_2+0x24>
		{
			counter = 0;
 29c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <counter>
			maxCounter = MAX_VEL;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <maxCounter>
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <__vector_2+0x2a>
		}
		else maxCounter*=2;
 2a8:	88 0f       	add	r24, r24
 2aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <maxCounter>
	}
	GICR &= ~(1<<INT1); // Запрет прерывания INT1
 2ae:	8b b7       	in	r24, 0x3b	; 59
 2b0:	8f 77       	andi	r24, 0x7F	; 127
 2b2:	8b bf       	out	0x3b, r24	; 59
	// для защиты от дребезга формируется пауза в DEB_NUM
	// переполнений Т0
	flagInt1 = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <flagInt1>
	debounceInt1 = DEB_NUM;
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <debounceInt1>
}
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_9>:

/***********************************************************************
	Подпрограмма обработки прерывания по переполнению таймера Т0
************************************************************************/
ISR(TIMER0_OVF_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	unsigned char temp; // Для временного хранения
	
	// Управление "бегущим огоньком"
	counter++;
 2da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <counter>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <counter>
	if (counter == maxCounter) //Переключение активного светодиода
 2e4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <maxCounter>
 2e8:	89 13       	cpse	r24, r25
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <__vector_9+0x3e>
	{  
		counter = 0;
 2ec:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <counter>
		temp = PORTA;
 2f0:	8b b3       	in	r24, 0x1b	; 27
		if(direction == 1)
 2f2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__data_end>
 2f6:	91 30       	cpi	r25, 0x01	; 1
 2f8:	21 f4       	brne	.+8      	; 0x302 <__vector_9+0x36>
		{
			temp = temp << 1; // Логический сдвиг влево
 2fa:	88 0f       	add	r24, r24
			if (temp == 0) // Было переполнение?
 2fc:	29 f4       	brne	.+10     	; 0x308 <__vector_9+0x3c>
			{
				temp = 0x01; // Начальная инициализация
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	03 c0       	rjmp	.+6      	; 0x308 <__vector_9+0x3c>
			}
		}
		else
		{
			temp = temp >> 1; // Логический сдвиг вправо
 302:	86 95       	lsr	r24
			if (temp==0) // Было переполнение?
 304:	09 f4       	brne	.+2      	; 0x308 <__vector_9+0x3c>
			{
				temp = 0x80; // Начальная инициализация
 306:	80 e8       	ldi	r24, 0x80	; 128
			}
		}
		PORTA = temp;	
 308:	8b bb       	out	0x1b, r24	; 27
	}

	//Подавление дребезга контактов INT0
	if (flagInt0 == 1)
 30a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flagInt0>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	71 f4       	brne	.+28     	; 0x32e <__vector_9+0x62>
	{
		debounceInt0--;
 312:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <debounceInt0>
 316:	81 50       	subi	r24, 0x01	; 1
 318:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <debounceInt0>
		if (debounceInt0 == 0)
 31c:	81 11       	cpse	r24, r1
 31e:	07 c0       	rjmp	.+14     	; 0x32e <__vector_9+0x62>
		{
			flagInt0 = 0;		// Сброс программного флага	
 320:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <flagInt0>
			GIFR = (1<<INTF0);	// Сброс флага прерывания
 324:	80 e4       	ldi	r24, 0x40	; 64
 326:	8a bf       	out	0x3a, r24	; 58
			GICR |=(1<<INT0);	// Разрешение прерывания					
 328:	8b b7       	in	r24, 0x3b	; 59
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	8b bf       	out	0x3b, r24	; 59
		}
	}

	//Подавление дребезга контактов INT1
	if (flagInt1 == 1)
 32e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <flagInt1>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	71 f4       	brne	.+28     	; 0x352 <__vector_9+0x86>
	{
		debounceInt1--;
 336:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <debounceInt1>
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <debounceInt1>
		if (debounceInt1 == 0)
 340:	81 11       	cpse	r24, r1
 342:	07 c0       	rjmp	.+14     	; 0x352 <__vector_9+0x86>
		{
			flagInt1 = 0;		// Сброс программного флага	
 344:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <flagInt1>
			GIFR = (1<<INTF1);	// Сброс флага прерывания
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	8a bf       	out	0x3a, r24	; 58
			GICR |=(1<<INT1);	// Разрешение прерывания					
 34c:	8b b7       	in	r24, 0x3b	; 59
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	8b bf       	out	0x3b, r24	; 59
		}
	}

	//Подавление дребезга контактов PB4 и PB5
	if (flagPB == 1)
 352:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flagPB>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	49 f4       	brne	.+18     	; 0x36c <__vector_9+0xa0>
	{
		debouncePB--;
 35a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <debouncePB>
 35e:	81 50       	subi	r24, 0x01	; 1
 360:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <debouncePB>
		if (debouncePB == 0) flagPB = 0; // Сброс программного флага	
 364:	81 11       	cpse	r24, r1
 366:	02 c0       	rjmp	.+4      	; 0x36c <__vector_9+0xa0>
 368:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flagPB>
	}
}
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <__umulhisi3>:
 37a:	a2 9f       	mul	r26, r18
 37c:	b0 01       	movw	r22, r0
 37e:	b3 9f       	mul	r27, r19
 380:	c0 01       	movw	r24, r0
 382:	a3 9f       	mul	r26, r19
 384:	70 0d       	add	r23, r0
 386:	81 1d       	adc	r24, r1
 388:	11 24       	eor	r1, r1
 38a:	91 1d       	adc	r25, r1
 38c:	b2 9f       	mul	r27, r18
 38e:	70 0d       	add	r23, r0
 390:	81 1d       	adc	r24, r1
 392:	11 24       	eor	r1, r1
 394:	91 1d       	adc	r25, r1
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
