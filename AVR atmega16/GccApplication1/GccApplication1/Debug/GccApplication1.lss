
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000794  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000df  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_1>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPort>:
/***********************************************************************
	Инициализация портов В/B
************************************************************************/
void InitPort(void)
{	
	DDRA = 0b11111111;	// PA0...PA7 - выходы (подключены к светодиодам)
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000001;	// один светодиод включен	
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	9b bb       	out	0x1b, r25	; 27
	
	DDRB = 0b11001111;	// PB4,PB5 - входы, остальные - выходы
  9a:	9f ec       	ldi	r25, 0xCF	; 207
  9c:	97 bb       	out	0x17, r25	; 23
	PORTB = 0b00110010;	// выбраны десятки (2-й индикатор)
  9e:	92 e3       	ldi	r25, 0x32	; 50
  a0:	98 bb       	out	0x18, r25	; 24
						// на входах PB4 и PB5 - подтягивающие резисторы
		
	DDRC = 0b11111111;	// PС0...PС7 - выходы
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11111100;	// код "0" при включении
  a4:	8c ef       	ldi	r24, 0xFC	; 252
  a6:	85 bb       	out	0x15, r24	; 21
    
	DDRD = 0b11110011;	// PD2(INT0),PD3(INT1)-входы
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;	// Подтягивающие резисторы на входах
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <InitTimerT0>:
	Инициализация таймера T0 
	Время переполнения таймера: t = 256*64/8000000 = 2 мс
************************************************************************/
void InitTimerT0(void)
{
	TCCR0 = (1<<CS01)|(1<<CS00);	//Разрешение работы таймера с предделителем 64
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1<<TOIE0;				//Разрешение прерывания по переполнению Т0
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	89 bf       	out	0x39, r24	; 57
  bc:	08 95       	ret

000000be <InitTimerT1>:
	Режим работы: Fast PWM с TOP = 0x00FF, выходная частота:
	8000000 Гц / (8*256) = 3906,25 Гц
************************************************************************/
void InitTimerT1(void)
{
	TCCR1A = (1<<COM1B1)|(1<<WGM13)|(1<<WGM12)|(1<<WGM11)|(1<<WGM10);	// Разрешение выхода канала В
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<CS12);		// Режим Fast PWM с TOP = 0x00FF
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	8e bd       	out	0x2e, r24	; 46
										// Разрешение работы с предделителем 8
	OCR1A = 156;
  c6:	8c e9       	ldi	r24, 0x9C	; 156
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9b bd       	out	0x2b, r25	; 43
  cc:	8a bd       	out	0x2a, r24	; 42
	OCR1B = INIT_DUTY;					// Задание начальной скважности
  ce:	84 e1       	ldi	r24, 0x14	; 20
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	99 bd       	out	0x29, r25	; 41
  d4:	88 bd       	out	0x28, r24	; 40
  d6:	08 95       	ret

000000d8 <InitExtInt>:
	Инициализация внешних прерываний INT0, INT1
	Условние прерывания - любое изменение уровня
************************************************************************/
void InitExtInt(void)
{
	MCUCR |= (1<<ISC10)|(1<<ISC00);	// Задание условия прерывания: любое изменение уровня
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1)|(1<<INT0);	// Разрешение INT0 и INT1	
  de:	8b b7       	in	r24, 0x3b	; 59
  e0:	80 6c       	ori	r24, 0xC0	; 192
  e2:	8b bf       	out	0x3b, r24	; 59
  e4:	08 95       	ret

000000e6 <main>:
Главная программа
************************************************************************/
int main(void)
{	
	//Инициализация необходимых периферийных модулей
	InitPort();		//Инициализация портов В/B
  e6:	0e 94 49 00 	call	0x92	; 0x92 <InitPort>
	InitTimerT0();	//Инициализация таймера T0
  ea:	0e 94 59 00 	call	0xb2	; 0xb2 <InitTimerT0>
	InitTimerT1();	//Инициализация таймера T1
  ee:	0e 94 5f 00 	call	0xbe	; 0xbe <InitTimerT1>
	InitExtInt();	//Инициализация внешних прерываний INT0, INT1
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <InitExtInt>
	
	sei();	//Глобальное разрешение прерываний (определена в interrupt.h)
  f6:	78 94       	sei
						
	//Основной цикл					
	while(1)
    {
		// Проверка флага об активном состоянии подавления дребезга
		if (flagPB == 0) // Дребезг от прошлого нажатия уже подавлен
  f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flagPB>
  fc:	81 11       	cpse	r24, r1
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x16>
		{
			if ((PINB & (1 << PINB4)) == 0) // Кнопка PB4 нажата?
 100:	b4 99       	sbic	0x16, 4	; 22
 102:	09 c0       	rjmp	.+18     	; 0x116 <main+0x30>
			{
				if(duty != INIT_DUTY)
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 108:	84 31       	cpi	r24, 0x14	; 20
 10a:	21 f0       	breq	.+8      	; 0x114 <main+0x2e>
				{
					duty -= INIT_DUTY;	// Уменьшение значения duty на INIT_DUTY
 10c:	84 51       	subi	r24, 0x14	; 20
					OCR1B = duty;		// Загрузка duty в OCR1B
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	99 bd       	out	0x29, r25	; 41
 112:	88 bd       	out	0x28, r24	; 40
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x2e>
					
				}
				debouncePB = DEB_NUM;  // Инициализация debouncePB
				flagPB = 1; // Установка флага о необходимости подавления дребезга
			}
			else if ((PINB & (1 << PINB5)) == 0) // кнопка PB5 нажата?
 116:	b5 99       	sbic	0x16, 5	; 22
 118:	f1 cf       	rjmp	.-30     	; 0xfc <main+0x16>
			{
				if(duty != 250) //Маскимальное значение
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 11e:	8a 3f       	cpi	r24, 0xFA	; 250
 120:	21 f0       	breq	.+8      	; 0x12a <main+0x44>
				{
					duty += INIT_DUTY;	// УВеличение значения duty на INIT_DUTY
 122:	8c 5e       	subi	r24, 0xEC	; 236
					OCR1B = duty;		// Загрузка duty в OCR1B
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	99 bd       	out	0x29, r25	; 41
 128:	88 bd       	out	0x28, r24	; 40
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x44>

0000012c <__vector_1>:

/***********************************************************************
	Подпрограмма обработки внешнего прерывания INT0 (кнопка PD2)
************************************************************************/
ISR(INT0_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	if ((PIND & (1 << PIND2)) == 0) // PD2 = 0? 
 138:	82 99       	sbic	0x10, 2	; 16
 13a:	0a c0       	rjmp	.+20     	; 0x150 <__vector_1+0x24>
	{   
		//Изменение direction
		if(direction == 0) direction = 1;
 13c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 140:	81 11       	cpse	r24, r1
 142:	04 c0       	rjmp	.+8      	; 0x14c <__vector_1+0x20>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_1+0x24>
		else direction = 0;
 14c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
	GICR &= ~(1<<INT0); // Запрет прерывания INT0
 150:	8b b7       	in	r24, 0x3b	; 59
 152:	8f 7b       	andi	r24, 0xBF	; 191
 154:	8b bf       	out	0x3b, r24	; 59
	// для защиты от дребезга формируется пауза в DEB_NUM
	// переполнений Т0
	flagInt0 = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flagInt0>
	debounceInt0 = DEB_NUM;
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <debounceInt0>
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_2>:

/***********************************************************************
	Подпрограмма обработки внешнего прерывания INT1 (кнопка PD3)
************************************************************************/
ISR(INT1_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
	if ((PIND & (1 << PIND3)) == 0) // PD3 = 0? 
 17a:	83 99       	sbic	0x10, 3	; 16
 17c:	0d c0       	rjmp	.+26     	; 0x198 <__vector_2+0x2a>
	{
		if( maxCounter == MIN_VEL)
 17e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <maxCounter>
 182:	80 32       	cpi	r24, 0x20	; 32
 184:	31 f4       	brne	.+12     	; 0x192 <__vector_2+0x24>
		{
			counter = 0;
 186:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counter>
			maxCounter = MAX_VEL;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <maxCounter>
 190:	03 c0       	rjmp	.+6      	; 0x198 <__vector_2+0x2a>
		}
		else maxCounter*=2;
 192:	88 0f       	add	r24, r24
 194:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <maxCounter>
	}
	GICR &= ~(1<<INT1); // Запрет прерывания INT1
 198:	8b b7       	in	r24, 0x3b	; 59
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8b bf       	out	0x3b, r24	; 59
	// для защиты от дребезга формируется пауза в DEB_NUM
	// переполнений Т0
	flagInt1 = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flagInt1>
	debounceInt1 = DEB_NUM;
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <debounceInt1>
}
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_9>:

/***********************************************************************
	Подпрограмма обработки прерывания по переполнению таймера Т0
************************************************************************/
ISR(TIMER0_OVF_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	unsigned char temp; // Для временного хранения
	
	// Управление "бегущим огоньком"
	counter++;
 1c4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <counter>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <counter>
	if (counter == maxCounter) //Переключение активного светодиода
 1ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <maxCounter>
 1d2:	89 13       	cpse	r24, r25
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <__vector_9+0x3e>
	{  
		counter = 0;
 1d6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counter>
		temp = PORTA;
 1da:	8b b3       	in	r24, 0x1b	; 27
		if(direction == 1)
 1dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 1e0:	91 30       	cpi	r25, 0x01	; 1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <__vector_9+0x36>
		{
			temp = temp << 1; // Логический сдвиг влево
 1e4:	88 0f       	add	r24, r24
			if (temp == 0) // Было переполнение?
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <__vector_9+0x3c>
			{
				temp = 0x01; // Начальная инициализация
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <__vector_9+0x3c>
			}
		}
		else
		{
			temp = temp >> 1; // Логический сдвиг вправо
 1ec:	86 95       	lsr	r24
			if (temp==0) // Было переполнение?
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <__vector_9+0x3c>
			{
				temp = 0x80; // Начальная инициализация
 1f0:	80 e8       	ldi	r24, 0x80	; 128
			}
		}
		PORTA = temp;	
 1f2:	8b bb       	out	0x1b, r24	; 27
	}

	//Подавление дребезга контактов INT0
	if (flagInt0 == 1)
 1f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flagInt0>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	71 f4       	brne	.+28     	; 0x218 <__vector_9+0x62>
	{
		debounceInt0--;
 1fc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <debounceInt0>
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <debounceInt0>
		if (debounceInt0 == 0)
 206:	81 11       	cpse	r24, r1
 208:	07 c0       	rjmp	.+14     	; 0x218 <__vector_9+0x62>
		{
			flagInt0 = 0;		// Сброс программного флага	
 20a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flagInt0>
			GIFR = (1<<INTF0);	// Сброс флага прерывания
 20e:	80 e4       	ldi	r24, 0x40	; 64
 210:	8a bf       	out	0x3a, r24	; 58
			GICR |=(1<<INT0);	// Разрешение прерывания					
 212:	8b b7       	in	r24, 0x3b	; 59
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8b bf       	out	0x3b, r24	; 59
		}
	}

	//Подавление дребезга контактов INT1
	if (flagInt1 == 1)
 218:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flagInt1>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	71 f4       	brne	.+28     	; 0x23c <__vector_9+0x86>
	{
		debounceInt1--;
 220:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debounceInt1>
 224:	81 50       	subi	r24, 0x01	; 1
 226:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <debounceInt1>
		if (debounceInt1 == 0)
 22a:	81 11       	cpse	r24, r1
 22c:	07 c0       	rjmp	.+14     	; 0x23c <__vector_9+0x86>
		{
			flagInt1 = 0;		// Сброс программного флага	
 22e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flagInt1>
			GIFR = (1<<INTF1);	// Сброс флага прерывания
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	8a bf       	out	0x3a, r24	; 58
			GICR |=(1<<INT1);	// Разрешение прерывания					
 236:	8b b7       	in	r24, 0x3b	; 59
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	8b bf       	out	0x3b, r24	; 59
		}
	}

	//Подавление дребезга контактов PB4 и PB5
	if (flagPB == 1)
 23c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flagPB>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	49 f4       	brne	.+18     	; 0x256 <__vector_9+0xa0>
	{
		debouncePB--;
 244:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <debouncePB>
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <debouncePB>
		if (debouncePB == 0) flagPB = 0; // Сброс программного флага	
 24e:	81 11       	cpse	r24, r1
 250:	02 c0       	rjmp	.+4      	; 0x256 <__vector_9+0xa0>
 252:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flagPB>
	}
}
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
